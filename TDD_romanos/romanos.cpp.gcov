        -:    0:Source:romanos.cpp
        -:    1:// Copyright (c) 2023, Thiago Fernandes
        -:    2:
        -:    3:#include "romanos.hpp"
        -:    4:#include <iostream>
        -:    5:#include <unordered_map>
        -:    6:#include <cstring>
        -:    7:#include <string>
        -:    8:
        -:    9:using std::unordered_map;
        -:   10:using std::strlen;
        -:   11:
     6017:   12:int romanToDecimal(const char* romanNumeral) {
        -:   13:    // Tabela de valores para cada caractere romano
        -:   14:    std::unordered_map<char, int> romanValues = {
        -:   15:        {'I', 1},
        -:   16:        {'V', 5},
        -:   17:        {'X', 10},
        -:   18:        {'L', 50},
        -:   19:        {'C', 100},
        -:   20:        {'D', 500},
        -:   21:        {'M', 1000}
     6017:   22:    };
        -:   23:    
     6017:   24:    int result = 0;
     6017:   25:    int previousValue = 0;
        -:   26:    
        -:   27:    // Itera sobre cada caractere do numeral romano
    48060:   28:    for (int i = 0; romanNumeral[i] != '\0'; i++) {
    42043:   29:        int currentValue = romanValues[romanNumeral[i]];
        -:   30:        
        -:   31:        // Se o valor do caractere atual é menor que o valor do caractere anterior,
        -:   32:        // então subtraímos o valor atual do resultado (ex: IV = 4)
    42043:   33:        if (currentValue > previousValue) {
     9616:   34:            result -= 2 * previousValue;
        -:   35:        }
        -:   36:        
    42043:   37:        result += currentValue;
    42043:   38:        previousValue = currentValue;
        -:   39:    }
        -:   40:    
     6017:   41:    return result;
     6017:   42:}
        -:   43:
     3014:   44:char const* decimal_to_Romano(int numero) {
        -:   45:    static const char* const algarismos[13] =
        -:   46:    {"M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"};
        -:   47:    static const int valores[13] =
        -:   48:    {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};
        -:   49:    static char romano[16];
        -:   50:
     3014:   51:    romano[0] = '\0';
        -:   52:
        -:   53:    // Loop pelos algarismos romanos e seus respectivos valores
    42196:   54:    for (int i = 0; i < 13; i++) {
    58400:   55:        while (numero >= valores[i]) {
    19218:   56:            int len = strlen(romano);
    19218:   57:            snprintf(romano+len, sizeof(romano)-len, "%s", algarismos[i]);
    19218:   58:            numero -= valores[i];
        -:   59:        }
        -:   60:    }
     3014:   61:    return romano;
        -:   62:}
        -:   63:
     3014:   64:int romanos_para_decimal(char const * num_romano) {
     3014:   65:    if (strcmp(decimal_to_Romano(romanToDecimal(num_romano)), num_romano) == 0) {
     3003:   66:    	return romanToDecimal(num_romano);
        -:   67:    }
        -:   68:    else {
       11:   69:    	return -1;
        -:   70:    }
        -:   71:}
